# -*- coding: utf-8 -*-
"""422_project final.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E9IppWJSeo9UbgI3UF6nPBulMPQjIRDy
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn import metrics

#taking data
data = pd.read_csv("/content/Train.csv")

#Look into the data 10 rows
data.head(10)

#Row and columns of data
data.shape

#General information of data
data.info()

#Null checking
data.isnull().sum()

"""Hnadeling  null value

"""

#Finding the mean
data['Item_Weight'].mean()
#Filling the missing value and repace
data["Item_Weight"].fillna(data['Item_Weight'].mean(), inplace=True)

#Check again
data.isnull().sum()

#Taking mod for Outlet_Size reffering the Outlet_Type
outlet_size_mode = data.pivot_table(values='Outlet_Size', columns='Outlet_Type', aggfunc=(lambda x:x.mode()[0]))
print(outlet_size_mode)

# Check missing value in Outlet_Size
outlet_size_missing_data=data["Outlet_Size"].isnull()
print(outlet_size_missing_data)

#Replacing data of missing
data.loc[outlet_size_missing_data, 'Outlet_Size'] = data.loc[outlet_size_missing_data,'Outlet_Type'].apply(lambda x: outlet_size_mode[x])

#Check again
data.isnull().sum()

#Some statistic analysis on data
data.describe()

#Ploting data to understand the data
sns.set()

#Item_weight distribution
plt.figure(figsize=(5,5))
sns.distplot(data['Item_Weight'])
plt.show()

print("                                                                  ")

#Item_Visibility distribution
plt.figure(figsize=(5,5))
sns.distplot(data['Item_Visibility'])
plt.show()


print("                                                                  ")


#Item_MRP distribution
plt.figure(figsize=(5,5))
sns.distplot(data['Item_MRP'])
plt.show()

print("                                                                  ")


#Item_Outlet_Sales distribution
plt.figure(figsize=(5,5))
sns.distplot(data['Item_Outlet_Sales'])
plt.show()

print("                                                                  ")


#Catagoric data


#Outlet_Establishment_Year
plt.figure(figsize=(5,5))
sns.countplot(x='Outlet_Establishment_Year', data=data)
plt.show()

print("                                                                  ")

#Item_Fat_Content
plt.figure(figsize=(6,6))
sns.countplot(x='Item_Fat_Content', data=data)
plt.show()


print("                                                                  ")


#Item_Type
plt.figure(figsize=(30,6))
sns.countplot(x='Item_Type', data=data)
plt.show()

print("                                                                  ")

#Outlet_Size
plt.figure(figsize=(6,6))
sns.countplot(x='Outlet_Size', data=data)
plt.show()

print("                                                                  ")

#Outlet_Location_Type
plt.figure(figsize=(6,6))
sns.countplot(x='Outlet_Location_Type', data=data)
plt.show()

#looking in Item_Fat_Content
data["Item_Fat_Content"].value_counts()

#Mearging Item_Fat_Content
data.replace({'Item_Fat_Content': {'low fat':'Low Fat', 'LF':'Low Fat', 'reg':'Regular'}}, inplace=True)
data["Item_Fat_Content"].value_counts()

#Data conversion
encoder = LabelEncoder()
data['Item_Identifier'] = encoder.fit_transform(data['Item_Identifier'])
data['Item_Fat_Content'] = encoder.fit_transform(data['Item_Fat_Content'])
data['Item_Type'] = encoder.fit_transform(data['Item_Type'])
data['Outlet_Identifier'] = encoder.fit_transform(data['Outlet_Identifier'])
data['Outlet_Size'] = encoder.fit_transform(data['Outlet_Size'])
data['Outlet_Location_Type'] = encoder.fit_transform(data['Outlet_Location_Type'])
data['Outlet_Type'] = encoder.fit_transform(data['Outlet_Type'])
#Watching data
data.head(10)

#Data processing
X = data.drop(columns='Item_Outlet_Sales', axis=1)
Y = data['Item_Outlet_Sales']
x_train,x_test,y_train,y_test = train_test_split(X,Y, test_size=0.3, random_state=2)

"""Model fitting and visualize"""

#Linear Regression
linear_model=LinearRegression()
linear_model.fit(x_train,y_train)
liner_predict=linear_model.predict(x_test)
liner_r2=metrics.r2_score(y_test,liner_predict)
linear_mae = metrics.mean_absolute_error(y_test,liner_predict)
linear_mse = metrics.mean_squared_error(y_test,liner_predict)
linear_rmse = np.sqrt(linear_mse)
#Ploting Linear Regression
plt.figure(figsize=(5,5))
plt.scatter(y_test,liner_predict, alpha=0.7)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual vs Predicted Sales: Linear Regression")
plt.show()

#Decision Tree
decision_model=DecisionTreeRegressor()
decision_model.fit(x_train,y_train)
decision_predict=decision_model.predict(x_test)
decision_r2=metrics.r2_score(y_test,decision_predict)
decision_mae = metrics.mean_absolute_error(y_test,decision_predict)
decision_mse = metrics.mean_squared_error(y_test,decision_predict)
decision_rmse = np.sqrt(decision_mse)
#Ploting Decision Tree
plt.figure(figsize=(5,5))
plt.scatter(y_test,decision_predict)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual vs Predicted Sales: Decision Tree")
plt.show()

# K-Nearest Neighbors
knn_model=KNeighborsRegressor()
knn_model.fit(x_train,y_train)
knn_predict=knn_model.predict(x_test)
knn_r2=metrics.r2_score(y_test,knn_predict)
knn_mae = metrics.mean_absolute_error(y_test,knn_predict)
knn_mse = metrics.mean_squared_error(y_test,knn_predict)
knn_rmse = np.sqrt(knn_mse)
#Ploting K-Nearest Neighbors
plt.figure(figsize=(5,5))
plt.scatter(y_test,knn_predict, alpha=0.7)
plt.xlabel("Actual")
plt.ylabel("Predicted")
plt.title("Actual vs Predicted Sales: K-Nearest Neighbors")

# Storing Data
results= pd.DataFrame({
    'Model': ['Linear Regression', 'Decision Tree', 'K-Nearest Neighbors'],
    'R2 Score': [liner_r2, decision_r2, knn_r2],
    'MAE': [linear_mae, decision_mae, knn_mae],
    'MSE': [linear_mse, decision_mse, knn_mse],
    'RMSE': [linear_rmse, decision_rmse, knn_rmse]
})

"""Bar chart for comparison

"""

#Bar Chart for R2 Compare
print("Closer to 1 is better in R2.")
plt.figure(figsize=(10,5))
sns.barplot(x='Model', y='R2 Score', data=results)
plt.title('R2 Score Comparison')
plt.show()

print("                                                                  ")

#Bar Chart for MAE Compare
print("The Lower is the better in MAE")
plt.figure(figsize=(10,5))
sns.barplot(x='Model', y='MAE', data=results)
plt.title('MAE Comparison')
plt.show()

print("                                                                  ")

#Bar Chart for MSE Compare
print("The Lower is the better in MSE")
plt.figure(figsize=(10,5))
sns.barplot(x='Model', y='MSE', data=results)
plt.title('MSE Comparison')
plt.show()

print("                                                                  ")

#Bar Chart for RMSE Compare
print("The Lower is the better RMSE")
plt.figure(figsize=(10,5))
sns.barplot(x='Model', y='RMSE', data=results)
plt.title('RMSE Comparison')
plt.show()

"""Matrics Table"""

print("Metrics Comparison:")
print(results)